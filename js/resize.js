"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var uploadForm = document.querySelector(".img-upload__form");
var resizeMinus = uploadForm.querySelector(".resize__control--minus");
var resizePlus = uploadForm.querySelector(".resize__control--plus");
var resizeValue = uploadForm.querySelector(".resize__control--value");
var picturePreview = uploadForm.querySelector(".img-upload__preview");

var PictureSize = {
  MIN: 25,
  MAX: 100,
  DEFAULT: 100,
  STEP: 25
};

var currentPictureSize = 100;

// Масштабирование изображения
/**
 * Записывает новый масштаб изображения size в поле resizeValue
 * м масштабирует изображение picturePreview на величину size
 * через задание ему стиля `transform: scale(size / 100)`
 *
 * @param {number} size
 */
var setPictureSize = function setPictureSize(size) {
  resizeValue.value = size + "%";
  picturePreview.style = "transform: scale(" + size / 100 + ")";
  currentPictureSize = size;
};

/**
 * Уменьшает масштаб изображения на величину PictureSize.STEP
 * и записывает новый масштаб изображения в поле resizeValue
 *
 */
var onResizeMinusClick = function onResizeMinusClick() {
  if (currentPictureSize > PictureSize.MIN) {
    var newSize = currentPictureSize - PictureSize.STEP;
    setPictureSize(newSize);
  }
};

/**
 * Увеличивает масштаб изображения на величину PictureSize.STEP
 * и записывает новый масштаб изображения в поле resizeValue
 *
 */
var onResizePlusClick = function onResizePlusClick() {
  if (currentPictureSize < PictureSize.MAX) {
    var newSize = currentPictureSize + PictureSize.STEP;
    setPictureSize(newSize);
  }
};

/**
* Устанавливает масштаб PictureSize.DEFAULT загруженному изображению
* и добавляет обработчики на кнопки масштабирования изображения
*
*/
var initialize = exports.initialize = function initialize() {
  setPictureSize(PictureSize.DEFAULT);
  resizeMinus.addEventListener("click", onResizeMinusClick);
  resizePlus.addEventListener("click", onResizePlusClick);
};

/**
* Удаляет обработчики с кнопок масштабирования изображения
*
*/
var finalize = exports.finalize = function finalize() {
  resizeMinus.removeEventListener("click", onResizeMinusClick);
  resizePlus.removeEventListener("click", onResizePlusClick);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2pzL3Jlc2l6ZS5qcyJdLCJuYW1lcyI6WyJ1cGxvYWRGb3JtIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVzaXplTWludXMiLCJyZXNpemVQbHVzIiwicmVzaXplVmFsdWUiLCJwaWN0dXJlUHJldmlldyIsIlBpY3R1cmVTaXplIiwiTUlOIiwiTUFYIiwiREVGQVVMVCIsIlNURVAiLCJjdXJyZW50UGljdHVyZVNpemUiLCJzZXRQaWN0dXJlU2l6ZSIsInNpemUiLCJ2YWx1ZSIsInN0eWxlIiwib25SZXNpemVNaW51c0NsaWNrIiwibmV3U2l6ZSIsIm9uUmVzaXplUGx1c0NsaWNrIiwiaW5pdGlhbGl6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaW5hbGl6ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTUEsYUFBYUMsU0FBU0MsYUFBVCxxQkFBbkI7QUFDQSxJQUFNQyxjQUFjSCxXQUFXRSxhQUFYLDJCQUFwQjtBQUNBLElBQU1FLGFBQWFKLFdBQVdFLGFBQVgsMEJBQW5CO0FBQ0EsSUFBTUcsY0FBY0wsV0FBV0UsYUFBWCwyQkFBcEI7QUFDQSxJQUFNSSxpQkFBaUJOLFdBQVdFLGFBQVgsd0JBQXZCOztBQUVBLElBQU1LLGNBQWM7QUFDbEJDLE9BQUssRUFEYTtBQUVsQkMsT0FBSyxHQUZhO0FBR2xCQyxXQUFTLEdBSFM7QUFJbEJDLFFBQU07QUFKWSxDQUFwQjs7QUFPQSxJQUFJQyxxQkFBcUIsR0FBekI7O0FBR0E7QUFDQTs7Ozs7OztBQU9BLElBQU1DLGlCQUFpQixTQUFqQkEsY0FBaUIsQ0FBQ0MsSUFBRCxFQUFVO0FBQy9CVCxjQUFZVSxLQUFaLEdBQXVCRCxJQUF2QjtBQUNBUixpQkFBZVUsS0FBZix5QkFBMkNGLE9BQU8sR0FBbEQ7QUFDQUYsdUJBQXFCRSxJQUFyQjtBQUNELENBSkQ7O0FBTUE7Ozs7O0FBS0EsSUFBTUcscUJBQXFCLFNBQXJCQSxrQkFBcUIsR0FBTTtBQUMvQixNQUFJTCxxQkFBcUJMLFlBQVlDLEdBQXJDLEVBQTBDO0FBQ3hDLFFBQU1VLFVBQVVOLHFCQUFxQkwsWUFBWUksSUFBakQ7QUFDQUUsbUJBQWVLLE9BQWY7QUFDRDtBQUNGLENBTEQ7O0FBT0E7Ozs7O0FBS0EsSUFBTUMsb0JBQW9CLFNBQXBCQSxpQkFBb0IsR0FBTTtBQUM5QixNQUFJUCxxQkFBcUJMLFlBQVlFLEdBQXJDLEVBQTBDO0FBQ3hDLFFBQU1TLFVBQVVOLHFCQUFxQkwsWUFBWUksSUFBakQ7QUFDQUUsbUJBQWVLLE9BQWY7QUFDRDtBQUNGLENBTEQ7O0FBT087Ozs7O0FBS1AsSUFBTUUsa0NBQWEsU0FBYkEsVUFBYSxHQUFNO0FBQ3ZCUCxpQkFBZU4sWUFBWUcsT0FBM0I7QUFDQVAsY0FBWWtCLGdCQUFaLFVBQXNDSixrQkFBdEM7QUFDQWIsYUFBV2lCLGdCQUFYLFVBQXFDRixpQkFBckM7QUFDRCxDQUpEOztBQU1POzs7O0FBSVAsSUFBTUcsOEJBQVcsU0FBWEEsUUFBVyxHQUFNO0FBQ3JCbkIsY0FBWW9CLG1CQUFaLFVBQXlDTixrQkFBekM7QUFDQWIsYUFBV21CLG1CQUFYLFVBQXdDSixpQkFBeEM7QUFDRCxDQUhEIiwiZmlsZSI6InJlc2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHVwbG9hZEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuaW1nLXVwbG9hZF9fZm9ybWApO1xuY29uc3QgcmVzaXplTWludXMgPSB1cGxvYWRGb3JtLnF1ZXJ5U2VsZWN0b3IoYC5yZXNpemVfX2NvbnRyb2wtLW1pbnVzYCk7XG5jb25zdCByZXNpemVQbHVzID0gdXBsb2FkRm9ybS5xdWVyeVNlbGVjdG9yKGAucmVzaXplX19jb250cm9sLS1wbHVzYCk7XG5jb25zdCByZXNpemVWYWx1ZSA9IHVwbG9hZEZvcm0ucXVlcnlTZWxlY3RvcihgLnJlc2l6ZV9fY29udHJvbC0tdmFsdWVgKTtcbmNvbnN0IHBpY3R1cmVQcmV2aWV3ID0gdXBsb2FkRm9ybS5xdWVyeVNlbGVjdG9yKGAuaW1nLXVwbG9hZF9fcHJldmlld2ApO1xuXG5jb25zdCBQaWN0dXJlU2l6ZSA9IHtcbiAgTUlOOiAyNSxcbiAgTUFYOiAxMDAsXG4gIERFRkFVTFQ6IDEwMCxcbiAgU1RFUDogMjVcbn07XG5cbmxldCBjdXJyZW50UGljdHVyZVNpemUgPSAxMDA7XG5cblxuLy8g0JzQsNGB0YjRgtCw0LHQuNGA0L7QstCw0L3QuNC1INC40LfQvtCx0YDQsNC20LXQvdC40Y9cbi8qKlxuICog0JfQsNC/0LjRgdGL0LLQsNC10YIg0L3QvtCy0YvQuSDQvNCw0YHRiNGC0LDQsSDQuNC30L7QsdGA0LDQttC10L3QuNGPIHNpemUg0LIg0L/QvtC70LUgcmVzaXplVmFsdWVcbiAqINC8INC80LDRgdGI0YLQsNCx0LjRgNGD0LXRgiDQuNC30L7QsdGA0LDQttC10L3QuNC1IHBpY3R1cmVQcmV2aWV3INC90LAg0LLQtdC70LjRh9C40L3RgyBzaXplXG4gKiDRh9C10YDQtdC3INC30LDQtNCw0L3QuNC1INC10LzRgyDRgdGC0LjQu9GPIGB0cmFuc2Zvcm06IHNjYWxlKHNpemUgLyAxMDApYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gKi9cbmNvbnN0IHNldFBpY3R1cmVTaXplID0gKHNpemUpID0+IHtcbiAgcmVzaXplVmFsdWUudmFsdWUgPSBgJHtzaXplfSVgO1xuICBwaWN0dXJlUHJldmlldy5zdHlsZSA9IGB0cmFuc2Zvcm06IHNjYWxlKCR7c2l6ZSAvIDEwMH0pYDtcbiAgY3VycmVudFBpY3R1cmVTaXplID0gc2l6ZTtcbn07XG5cbi8qKlxuICog0KPQvNC10L3RjNGI0LDQtdGCINC80LDRgdGI0YLQsNCxINC40LfQvtCx0YDQsNC20LXQvdC40Y8g0L3QsCDQstC10LvQuNGH0LjQvdGDIFBpY3R1cmVTaXplLlNURVBcbiAqINC4INC30LDQv9C40YHRi9Cy0LDQtdGCINC90L7QstGL0Lkg0LzQsNGB0YjRgtCw0LEg0LjQt9C+0LHRgNCw0LbQtdC90LjRjyDQsiDQv9C+0LvQtSByZXNpemVWYWx1ZVxuICpcbiAqL1xuY29uc3Qgb25SZXNpemVNaW51c0NsaWNrID0gKCkgPT4ge1xuICBpZiAoY3VycmVudFBpY3R1cmVTaXplID4gUGljdHVyZVNpemUuTUlOKSB7XG4gICAgY29uc3QgbmV3U2l6ZSA9IGN1cnJlbnRQaWN0dXJlU2l6ZSAtIFBpY3R1cmVTaXplLlNURVA7XG4gICAgc2V0UGljdHVyZVNpemUobmV3U2l6ZSk7XG4gIH1cbn07XG5cbi8qKlxuICog0KPQstC10LvQuNGH0LjQstCw0LXRgiDQvNCw0YHRiNGC0LDQsSDQuNC30L7QsdGA0LDQttC10L3QuNGPINC90LAg0LLQtdC70LjRh9C40L3RgyBQaWN0dXJlU2l6ZS5TVEVQXG4gKiDQuCDQt9Cw0L/QuNGB0YvQstCw0LXRgiDQvdC+0LLRi9C5INC80LDRgdGI0YLQsNCxINC40LfQvtCx0YDQsNC20LXQvdC40Y8g0LIg0L/QvtC70LUgcmVzaXplVmFsdWVcbiAqXG4gKi9cbmNvbnN0IG9uUmVzaXplUGx1c0NsaWNrID0gKCkgPT4ge1xuICBpZiAoY3VycmVudFBpY3R1cmVTaXplIDwgUGljdHVyZVNpemUuTUFYKSB7XG4gICAgY29uc3QgbmV3U2l6ZSA9IGN1cnJlbnRQaWN0dXJlU2l6ZSArIFBpY3R1cmVTaXplLlNURVA7XG4gICAgc2V0UGljdHVyZVNpemUobmV3U2l6ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCAvKipcbiAqINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINC80LDRgdGI0YLQsNCxIFBpY3R1cmVTaXplLkRFRkFVTFQg0LfQsNCz0YDRg9C20LXQvdC90L7QvNGDINC40LfQvtCx0YDQsNC20LXQvdC40Y5cbiAqINC4INC00L7QsdCw0LLQu9GP0LXRgiDQvtCx0YDQsNCx0L7RgtGH0LjQutC4INC90LAg0LrQvdC+0L/QutC4INC80LDRgdGI0YLQsNCx0LjRgNC+0LLQsNC90LjRjyDQuNC30L7QsdGA0LDQttC10L3QuNGPXG4gKlxuICovXG5jb25zdCBpbml0aWFsaXplID0gKCkgPT4ge1xuICBzZXRQaWN0dXJlU2l6ZShQaWN0dXJlU2l6ZS5ERUZBVUxUKTtcbiAgcmVzaXplTWludXMuYWRkRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBvblJlc2l6ZU1pbnVzQ2xpY2spO1xuICByZXNpemVQbHVzLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgb25SZXNpemVQbHVzQ2xpY2spO1xufTtcblxuZXhwb3J0IC8qKlxuICog0KPQtNCw0LvRj9C10YIg0L7QsdGA0LDQsdC+0YLRh9C40LrQuCDRgSDQutC90L7Qv9C+0Log0LzQsNGB0YjRgtCw0LHQuNGA0L7QstCw0L3QuNGPINC40LfQvtCx0YDQsNC20LXQvdC40Y9cbiAqXG4gKi9cbmNvbnN0IGZpbmFsaXplID0gKCkgPT4ge1xuICByZXNpemVNaW51cy5yZW1vdmVFdmVudExpc3RlbmVyKGBjbGlja2AsIG9uUmVzaXplTWludXNDbGljayk7XG4gIHJlc2l6ZVBsdXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihgY2xpY2tgLCBvblJlc2l6ZVBsdXNDbGljayk7XG59O1xuIl19